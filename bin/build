#!/usr/bin/env node

const chalk = require('chalk')
const path = require('path')
const program = require('commander')
const metalsmith = require('metalsmith')
const drafts = require('metalsmith-drafts')
const cleanCSS = require('metalsmith-clean-css')
const typography = require('metalsmith-typography')
const static = require('metalsmith-static')
const collections = require('metalsmith-collections')
const branch = require('metalsmith-branch')
const inPlace = require('metalsmith-in-place')
const dateFormatter = require('metalsmith-date-formatter')
const markdown = require('metalsmith-markdown')
const define = require('metalsmith-define')
const permalinks = require('metalsmith-permalinks')
const watch = require('metalsmith-watch')
const layouts = require('metalsmith-layouts')
const serve = require('metalsmith-serve')

console.log(chalk.green('Starting build'))

program
  .version('0.0.1')
  .option('-w, --watch', 'Watch for changes')
  .parse(process.argv)

const ms = metalsmith(path.join(__dirname, '..'))

//ms.use(function(files, metalsmith, done){
  //setImmediate(done);
  //Object.keys(files).forEach(function(file){
    //var data = files[file];
    //if (data.layout) {
      //console.log(data.layout)
    //}
  //});
//})

// Assets
ms.use(static({
  dest: '.',
  src: 'public',
}))

// Markdown pipeline
ms.use(drafts())
ms.use(collections({
  articles: {
    pattern: 'articles/**/*.md',
    sortBy: 'date',
    reverse: true,
  },
}))
ms.use(dateFormatter({
  dates: [
    {
      key: 'date',
      format: 'LL',
    },
  ],
}))
ms.use(inPlace({
  engine: 'handlebars',
  partials: 'partials',
}))
ms.use(markdown({
  gfm: true,
  smartypants: true,
  tables: true,
}))
ms.use(permalinks())
ms.use(typography({
  lang: 'en',
}))
ms.use(layouts({
  default: 'article.html',
  engine: 'handlebars',
  partials: 'partials',
}))


// Handle watching for changes
if (program.watch) {
  console.log(chalk.green('Watching for changes...'))
  ms.use(serve({}))
  ms.use(
    watch({
      paths: {
        '${source}/**/*': true,
        'layouts/**/*': '**/*.*',
        'partials/**/*': '**/*.*',
        'public/**/*': '**/*.*',
      },
      livereload: true,
    })
  )
  ms.use(define({
    development: true,
  }))
}

ms.build(function (err) {
  if (err) {
    throw err
  }
  console.log(chalk.green('Build finished'))
})
